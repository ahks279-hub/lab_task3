#include <stdio.h>
#include <stdbool.h>

#define SIZE 24
#define nRows 8
#define nCols 3

// PROTOTYPES
void print_array(int array[], int length);
void print_matrix(int mat[][nCols], int rows);
bool isValid(const int arr[], int length, int pos);
void remove_element(int arr[], int length, int pos);
void insert_element(int arr[], int length, int pos, int value);
void reshape(const int arr[], int length, int nRows, int nCols, int arr2d[nRows][nCols]);
void trans_matrix(int nRows, int nCols, const int mat[nRows][nCols], int mat_transp[nCols][nRows]);
bool found_duplicate(int arr[], int length);

int main() {
    int arr[SIZE] = {10, 20, 30, 40, 50}; // Example array with some initial values
    int arr2d[nRows][nCols] = {0};

    printf("Testing remove_element:\n");
    remove_element(arr, SIZE, 2);
    print_array(arr, SIZE);

    printf("Testing insert_element:\n");
    insert_element(arr, SIZE, 2, 80);
    print_array(arr, SIZE);

    printf("Testing reshape:\n");
    reshape(arr, SIZE, nRows, nCols, arr2d);
    print_matrix(arr2d, nRows);

    printf("Testing transpose:\n");
    

    printf("Checking for duplicates:\n");
    printf(found_duplicate(arr, SIZE) ? "Duplicates found\n" : "No duplicates\n");

    return 0;
}

// FUNCTION DEFINITIONS

void print_array(int array[], int length) {
    for (int i = 0; i < length; i++)
        printf("array[%d] = %d\n", i, array[i]);
}

void print_matrix(int mat[][nCols], int rows) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < nCols; j++)
            printf("mat[%d][%d] = %d ", i, j, mat[i][j]);
        puts("");
    }
}

bool isValid(const int arr[], int length, int pos) {
    return pos >= 0 && pos < length;
}

void remove_element(int arr[], int length, int pos) {
    if (!isValid(arr, length, pos)) {
        printf("Invalid index %d.\n", pos);
        return;
    }
    for (int i = pos; i < length - 1; i++) {
        arr[i] = arr[i + 1];
    }
    arr[length - 1] = 0; // Optional: Set last element to 0 after shifting.
}

void insert_element(int arr[], int length, int pos, int value) {
    if (!isValid(arr, length, pos)) {
        printf("Invalid index %d.\n", pos);
        return;
    }
    for (int i = length - 1; i > pos; i--) {
        arr[i] = arr[i - 1];
    }
    arr[pos] = value;
}

void reshape(const int arr[], int length, int nRows, int nCols, int arr2d[nRows][nCols]) {
    if (length != nRows * nCols) {
        printf("Error: Array length does not match dimensions.\n");
        return;
    }
    for (int col = 0; col < nCols; col++) {
        for (int row = 0; row < nRows; row++) {
            arr2d[row][col] = arr[col * nRows + row];
        }
    }
}

void trans_matrix(int nRows, int nCols, const int mat[nRows][nCols], int mat_transp[nCols][nRows]) {
   

bool found_duplicate(int arr[], int length) {
    for (int i = 0; i < length - 1; i++) {
        for (int j = i + 1; j < length; j++) {
            if (arr[i] == arr[j]) {
                return true;
            }
        }
    }
    return false;
}
